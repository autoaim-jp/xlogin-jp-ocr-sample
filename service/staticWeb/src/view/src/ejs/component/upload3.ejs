<div id='uploadTabContainer' class='' x-data="imageViewer()" x-init="checkOcrPermission()">
  <div x-show="!hasOcrPermission" class='flex justify-center'>
    <button @click="loginWithOcrPermission" class='bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded'>XLogin</button>
  </div>

  <div x-show="hasOcrPermission" class='max-w-md mx-auto bg-white p-6 rounded-lg shadow-md mb-4'>
    <h2 class='text-xl font-semibold mb-4'>ファイルアップロード</h2>
    <form id='uploadProfileForm' action='#'>
      <div class='mb-4'>
        <label for='file' class='block text-gray-700 font-medium'>ファイルを選択してください</label>
        <input id='profileImageInput' type='file' name='file' id='file' accept="image/*" @change="fileChosen" />
      </div>
      <div x-show="imageUrl">
        <img :src="imageUrl" class="object-cover rounded border border-gray-200">
      </div>
      <button type='submit' class='bg-blue-500 text-white font-semibold px-4 py-2 rounded hover:bg-blue-600 focus:outline-none focus:bg-blue-600'>
        画像をテキストに変換
      </button>
    </form>
    <%- include(`${componentPath}ocrResult.ejs`)  %>
  </div>
</div>

<script>
  function imageViewer() {
      return {
          imageUrl: '',
          hasOcrPermission: false,
          authActionHref: '/f/xlogin/connect?redirectAfterAuth=/mypage',
          loginWithOcrPermission() {
              window.location.href = this.authActionHref
            },

          fileChosen(event) {
              this.fileToDataUrl(event, src => this.imageUrl = src)
              window.dispatchEvent(new CustomEvent('ace-banner', { detail: { isVisible: true, title: '[成功]', message: 'ファイルを選択しました。' }, bubbles: true }))
            },

          fileToDataUrl(event, callback) {
              if (!event.target.files.length) return

              const file = event.target.files[0]
              const reader = new FileReader()

              reader.readAsDataURL(file)
              reader.onload = e => callback(e.target.result)
            },
          async checkOcrPermission () {
              const splitPermissionListResult = await a.lib.common.input.fetchSplitPermissionList(a.setting.browserServerSetting.getValue('apiEndpoint'))
              if (!splitPermissionListResult.result) {
                  this.hasOcrPermission = false
                  return
                }
              const { splitPermissionList, clientId } = splitPermissionListResult.result
              const permission = 'rw:$CLIENT_ID:tesseract' 
              const queryPart = `&requestScope=${permission.replace(/\$CLIENT_ID/g, clientId)}`
              this.authActionHref = `/f/xlogin/connect?redirectAfterAuth=/mypage${queryPart}`

              if (splitPermissionList.optional[`rw:${clientId}:tesseract`]) {
                  this.hasOcrPermission = true
                } else {
                    this.hasOcrPermission = false
                  }
            },
        }
    }
</script>

<style>
  .test {
    width: 100px;
    height:1 00px;
  }
</style>
