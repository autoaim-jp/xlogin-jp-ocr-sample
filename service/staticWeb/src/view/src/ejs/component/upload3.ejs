<div id='uploadTabContainer' class='' x-data="imageViewer()" x-init="initUploadDiv()">
  <div x-show="!hasOcrPermission" class='flex justify-center'>
    <button @click="loginWithOcrPermission" class='bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded'>XLogin</button>
  </div>

  <div x-show="hasOcrPermission" class='max-w-md mx-auto bg-white p-6 rounded-lg shadow-md mb-4'>
    <h2 class='text-xl font-semibold mb-4'>ファイルアップロード</h2>
    <form id='uploadProfileForm' action='#' @submit.prevent="uploadImage">
      <div class='mb-4'>
        <label for='file' class='block text-gray-700 font-medium'>ファイルを選択してください</label>
        <input id='profileImageInput' type='file' name='file' id='file' accept="image/*" @change="fileChosen" />
      </div>
      <div x-show="imageUrl">
        <img :src="imageUrl" class="object-cover rounded border border-gray-200">
      </div>
      <button type='submit' class='bg-blue-500 text-white font-semibold px-4 py-2 rounded hover:bg-blue-600 focus:outline-none focus:bg-blue-600'>
        画像をテキストに変換
      </button>
    </form>
    <%- include(`${componentPath}ocrResult.ejs`)  %>
  </div>
</div>

<script>
function imageViewer() {
  return {
    imageUrl: '',
    hasOcrPermission: false,
    authActionHref: '/f/xlogin/connect?redirectAfterAuth=/mypage',

    async initUploadDiv() {
      this.startResponseLoader()
      await this.checkOcrPermission()

      window.dispatchEvent(new CustomEvent('ace-init', { detail: { from: 'upload3.ejs' } }))
    },

    async startResponseLoader() {
      const fetchResponseList = a.input.getFetchResponseList(argNamed({
        browserServerSetting: a.setting.browserServerSetting.getList('apiEndpoint'),
        lib: [a.lib.common.input.getRequest],
      }))

      await a.core.lookupResponse(argNamed({
        param: { fetchResponseList },
        output: [a.output.showOcrResult],
      }))

      setInterval(async () => {
        await a.core.lookupResponse(argNamed({
          param: { fetchResponseList },
          output: [a.output.showOcrResult],
        }))
      }, 2 * 1000)
    },
    async uploadImage() {
      const uploadFile = a.output.getUploadFile(argNamed({
        browserServerSetting: a.setting.browserServerSetting.getList('apiEndpoint'),
        lib: [a.lib.common.output.postFormRequest],
      }))

      const onSubmitUploadForm = a.action.getOnSubmitUploadForm(argNamed({
        output: { uploadFile },
        core: [a.core.registerRequestId],
      }))

      await onSubmitUploadForm()
      window.dispatchEvent(new CustomEvent('ace-banner', { detail: { isVisible: true, title: '[成功]', message: 'ファイルをアップロードしました。' }, bubbles: true }))
    },

    loginWithOcrPermission() {
      window.location.href = this.authActionHref
    },

    fileChosen(event) {
      this.fileToDataUrl(event, src => this.imageUrl = src)
      window.dispatchEvent(new CustomEvent('ace-banner', { detail: { isVisible: true, title: '[成功]', message: 'ファイルを選択しました。' }, bubbles: true }))
    },

    fileToDataUrl(event, callback) {
      if (!event.target.files.length) return

      const file = event.target.files[0]
      const reader = new FileReader()

      reader.readAsDataURL(file)
      reader.onload = e => callback(e.target.result)
    },

    async checkOcrPermission () {
      const splitPermissionListResult = await a.lib.common.input.fetchSplitPermissionList(a.setting.browserServerSetting.getValue('apiEndpoint'))
      if (!splitPermissionListResult.result) {
        this.hasOcrPermission = false
        return
      }
      const { splitPermissionList, clientId } = splitPermissionListResult.result
      const permission = 'rw:$CLIENT_ID:tesseract' 
      const queryPart = `&requestScope=${permission.replace(/\$CLIENT_ID/g, clientId)}`
      this.authActionHref = `/f/xlogin/connect?redirectAfterAuth=/mypage${queryPart}`

      if (splitPermissionList.optional[`rw:${clientId}:tesseract`]) {
        this.hasOcrPermission = true
      } else {
        this.hasOcrPermission = false
      }
    },
  }
}
</script>

<style>
.test {
  width: 100px;
  height:1 00px;
}
</style>
